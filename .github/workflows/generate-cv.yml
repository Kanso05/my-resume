name: Generate CV from Template

on:
  push:
    paths:
      - 'CV/*.md'              # Se d√©clenche sur les changements des fichiers .md dans CV/
      - 'Template/Cv_modern.html'  # Se d√©clenche aussi sur les changements du template
    branches:
      - main

jobs:
  generate-cv:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2    # Pour comparer avec le commit pr√©c√©dent
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        pip install anthropic
    
    - name: Create Output directory if not exists
      run: mkdir -p Output
    
    - name: Detect changed CV files
      id: changed-files
      run: |
        # V√©rifier si le template a chang√©
        TEMPLATE_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep '^Template/Cv_modern\.html
    
    - name: Generate CV files with Claude
      if: steps.changed-files.outputs.changed_files != ''
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
      run: |
        python << 'EOF'
        import anthropic
        import os
        import hashlib
        from pathlib import Path
        
        def read_file(filepath):
            """Lit un fichier avec gestion d'erreur."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return f.read()
            except Exception as e:
                print(f"‚ùå Erreur lecture {filepath}: {e}")
                return None
        
        def write_file(filepath, content):
            """√âcrit un fichier."""
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                return True
            except Exception as e:
                print(f"‚ùå Erreur √©criture {filepath}: {e}")
                return False
        
        def file_hash(filepath):
            """Calcule le hash MD5 d'un fichier."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return hashlib.md5(f.read().encode()).hexdigest()
            except:
                return None
        
        def generate_cv_with_claude(cv_content, template_content, cv_filename):
            """G√©n√®re le CV avec Claude."""
            try:
                client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
                
                prompt = f"""
                Tu es un expert en g√©n√©ration de CV professionnel. Je vais te donner un CV en markdown et un template HTML moderne.
                
                **CV en Markdown ({cv_filename}) :**
                ```markdown
                {cv_content}
                ```
                
                **Template HTML moderne :**
                ```html
                {template_content}
                ```
                
                **Instructions sp√©cifiques :**
                1. Int√®gre parfaitement le contenu markdown dans le template HTML
                2. Convertis le markdown en HTML s√©mantique (h1, h2, p, ul, li, strong, em, etc.)
                3. Respecte absolument la structure, les classes CSS et les styles du template
                4. Assure-toi que les sections du CV s'adaptent aux zones pr√©vues dans le template
                5. Maintiens l'aspect moderne et professionnel du template
                6. G√©n√®re un HTML valide et bien indent√©
                7. Pr√©serve tous les styles CSS et la mise en page du template
                
                **Tr√®s important :** R√©ponds uniquement avec le code HTML final complet, sans explications, sans balises de code markdown, juste le HTML pur.
                """
                
                response = client.messages.create(
                    model="claude-sonnet-4-20250514",
                    max_tokens=4000,
                    messages=[{
                        "role": "user",
                        "content": prompt
                    }]
                )
                
                generated_html = response.content[0].text.strip()
                
                # Nettoyage du contenu au cas o√π Claude ajouterait des balises
                if generated_html.startswith('```html'):
                    generated_html = generated_html.split('```html')[1].split('```')[0].strip()
                elif generated_html.startswith('```'):
                    generated_html = generated_html.split('```')[1].split('```')[0].strip()
                
                return generated_html
                
            except Exception as e:
                print(f"‚ùå Erreur Claude API: {e}")
                return None
        
        # R√©cup√©rer les fichiers modifi√©s
        changed_files = os.getenv('CHANGED_FILES', '').strip()
        if not changed_files:
            print("Aucun fichier CV √† traiter")
            exit(0)
        
        # D√©terminer si c'est un changement de template ou de CV
        file_list = [f.strip() for f in changed_files.split('\n') if f.strip()]
        is_template_change = any('Template/' in f for f in file_list) or len([f for f in file_list if f.startswith('CV/')]) > 1
        
        if is_template_change:
            print(f"üé® R√©g√©n√©ration compl√®te suite √† modification du template")
            print(f"üìù {len([f for f in file_list if f.endswith('.md')])} fichiers CV √† traiter:")
        else:
            print(f"üìù Fichiers CV modifi√©s d√©tect√©s:")
        
        for f in file_list:
            if f.endswith('.md'):
                print(f"  - {f}")
        
        # Lire le template
        print("üìñ Lecture du template...")
        template_content = read_file('Template/Cv_modern.html')
        if not template_content:
            print("‚ùå Impossible de lire le template")
            exit(1)
        
        # Traiter chaque fichier modifi√©
        files_generated = []
        
        for cv_file in file_list:
            if not cv_file.endswith('.md'):
                continue
                
            print(f"\nüîÑ Traitement de {cv_file}...")
            
            # Lire le contenu du CV
            cv_content = read_file(cv_file)
            if not cv_content:
                print(f"‚ùå Impossible de lire {cv_file}")
                continue
            
            # G√©n√©rer le nom du fichier de sortie
            cv_filename = Path(cv_file).stem  # Nom sans extension
            output_file = f"Output/{cv_filename}.html"
            
            print(f"üìÑ G√©n√©ration: {cv_file} ‚Üí {output_file}")
            
            # G√©n√©rer le CV avec Claude
            generated_html = generate_cv_with_claude(cv_content, template_content, cv_filename)
            if not generated_html:
                print(f"‚ùå √âchec g√©n√©ration pour {cv_file}")
                continue
            
            # V√©rifier si le fichier existe d√©j√† et s'il est diff√©rent
            needs_update = True
            if os.path.exists(output_file):
                # Comparer les hash pour voir si le contenu a chang√©
                old_hash = file_hash(output_file)
                new_hash = hashlib.md5(generated_html.encode()).hexdigest()
                
                if old_hash == new_hash:
                    print(f"‚úÖ {output_file} est d√©j√† √† jour")
                    needs_update = False
                else:
                    print(f"üîÑ {output_file} sera mis √† jour (contenu diff√©rent)")
            else:
                print(f"‚ú® Cr√©ation de {output_file}")
            
            if needs_update:
                if write_file(output_file, generated_html):
                    files_generated.append(output_file)
                    print(f"‚úÖ {output_file} g√©n√©r√© avec succ√®s")
        
        # Sauvegarder la liste des fichiers g√©n√©r√©s pour l'√©tape suivante
        if files_generated:
            with open('/tmp/files_generated.txt', 'w') as f:
                f.write('\n'.join(files_generated))
            print(f"\nüéâ {len(files_generated)} fichier(s) CV g√©n√©r√©(s) !")
        else:
            print("\nüí° Aucun fichier √† mettre √† jour")
        EOF
    
    - name: Commit and push changes
      run: |
        # V√©rifier s'il y a des fichiers g√©n√©r√©s
        if [ -f "/tmp/files_generated.txt" ]; then
          FILES_GENERATED=$(cat /tmp/files_generated.txt)
          
          if [ -n "$FILES_GENERATED" ]; then
            # Configuration Git
            git config --local user.email "action@github.com"
            git config --local user.name "CV Generator Bot"
            
            # Ajouter les fichiers g√©n√©r√©s
            echo "$FILES_GENERATED" | xargs git add
            
            # D√©tecter le type de changement pour le message de commit
            TEMPLATE_CHANGED=$(git show --name-only HEAD~1 | grep '^Template/Cv_modern\.html
            
            # Commiter et pusher
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "‚úÖ Changements committ√©s et push√©s avec succ√®s !"
          else
            echo "üí° Aucun changement √† committer"
          fi
        else
          echo "üí° Aucun fichier g√©n√©r√©"
        fi || true)
        
        if [ -n "$TEMPLATE_CHANGED" ]; then
          echo "üé® Template modifi√© - G√©n√©ration de tous les CV"
          # Si le template a chang√©, traiter tous les fichiers CV
          ALL_CV_FILES=$(find CV -name "*.md" -type f | sort)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$ALL_CV_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          # Sinon, d√©tecter uniquement les fichiers .md modifi√©s dans le r√©pertoire CV/
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^CV/.*\.md
    
    - name: Generate CV files with Claude
      if: steps.changed-files.outputs.changed_files != ''
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
      run: |
        python << 'EOF'
        import anthropic
        import os
        import hashlib
        from pathlib import Path
        
        def read_file(filepath):
            """Lit un fichier avec gestion d'erreur."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return f.read()
            except Exception as e:
                print(f"‚ùå Erreur lecture {filepath}: {e}")
                return None
        
        def write_file(filepath, content):
            """√âcrit un fichier."""
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                return True
            except Exception as e:
                print(f"‚ùå Erreur √©criture {filepath}: {e}")
                return False
        
        def file_hash(filepath):
            """Calcule le hash MD5 d'un fichier."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return hashlib.md5(f.read().encode()).hexdigest()
            except:
                return None
        
        def generate_cv_with_claude(cv_content, template_content, cv_filename):
            """G√©n√®re le CV avec Claude."""
            try:
                client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
                
                prompt = f"""
                Tu es un expert en g√©n√©ration de CV professionnel. Je vais te donner un CV en markdown et un template HTML moderne.
                
                **CV en Markdown ({cv_filename}) :**
                ```markdown
                {cv_content}
                ```
                
                **Template HTML moderne :**
                ```html
                {template_content}
                ```
                
                **Instructions sp√©cifiques :**
                1. Int√®gre parfaitement le contenu markdown dans le template HTML
                2. Convertis le markdown en HTML s√©mantique (h1, h2, p, ul, li, strong, em, etc.)
                3. Respecte absolument la structure, les classes CSS et les styles du template
                4. Assure-toi que les sections du CV s'adaptent aux zones pr√©vues dans le template
                5. Maintiens l'aspect moderne et professionnel du template
                6. G√©n√®re un HTML valide et bien indent√©
                7. Pr√©serve tous les styles CSS et la mise en page du template
                
                **Tr√®s important :** R√©ponds uniquement avec le code HTML final complet, sans explications, sans balises de code markdown, juste le HTML pur.
                """
                
                response = client.messages.create(
                    model="claude-sonnet-4-20250514",
                    max_tokens=4000,
                    messages=[{
                        "role": "user",
                        "content": prompt
                    }]
                )
                
                generated_html = response.content[0].text.strip()
                
                # Nettoyage du contenu au cas o√π Claude ajouterait des balises
                if generated_html.startswith('```html'):
                    generated_html = generated_html.split('```html')[1].split('```')[0].strip()
                elif generated_html.startswith('```'):
                    generated_html = generated_html.split('```')[1].split('```')[0].strip()
                
                return generated_html
                
            except Exception as e:
                print(f"‚ùå Erreur Claude API: {e}")
                return None
        
        # R√©cup√©rer les fichiers modifi√©s
        changed_files = os.getenv('CHANGED_FILES', '').strip()
        if not changed_files:
            print("Aucun fichier CV modifi√©")
            exit(0)
        
        print(f"üìù Fichiers CV modifi√©s d√©tect√©s:")
        file_list = [f.strip() for f in changed_files.split('\n') if f.strip()]
        
        # Lire le template
        print("üìñ Lecture du template...")
        template_content = read_file('Template/Cv_modern.html')
        if not template_content:
            print("‚ùå Impossible de lire le template")
            exit(1)
        
        # Traiter chaque fichier modifi√©
        files_generated = []
        
        for cv_file in file_list:
            if not cv_file.endswith('.md'):
                continue
                
            print(f"\nüîÑ Traitement de {cv_file}...")
            
            # Lire le contenu du CV
            cv_content = read_file(cv_file)
            if not cv_content:
                print(f"‚ùå Impossible de lire {cv_file}")
                continue
            
            # G√©n√©rer le nom du fichier de sortie
            cv_filename = Path(cv_file).stem  # Nom sans extension
            output_file = f"Output/{cv_filename}.html"
            
            print(f"üìÑ G√©n√©ration: {cv_file} ‚Üí {output_file}")
            
            # G√©n√©rer le CV avec Claude
            generated_html = generate_cv_with_claude(cv_content, template_content, cv_filename)
            if not generated_html:
                print(f"‚ùå √âchec g√©n√©ration pour {cv_file}")
                continue
            
            # V√©rifier si le fichier existe d√©j√† et s'il est diff√©rent
            needs_update = True
            if os.path.exists(output_file):
                # Comparer les hash pour voir si le contenu a chang√©
                old_hash = file_hash(output_file)
                new_hash = hashlib.md5(generated_html.encode()).hexdigest()
                
                if old_hash == new_hash:
                    print(f"‚úÖ {output_file} est d√©j√† √† jour")
                    needs_update = False
                else:
                    print(f"üîÑ {output_file} sera mis √† jour (contenu diff√©rent)")
            else:
                print(f"‚ú® Cr√©ation de {output_file}")
            
            if needs_update:
                if write_file(output_file, generated_html):
                    files_generated.append(output_file)
                    print(f"‚úÖ {output_file} g√©n√©r√© avec succ√®s")
        
        # Sauvegarder la liste des fichiers g√©n√©r√©s pour l'√©tape suivante
        if files_generated:
            with open('/tmp/files_generated.txt', 'w') as f:
                f.write('\n'.join(files_generated))
            print(f"\nüéâ {len(files_generated)} fichier(s) CV g√©n√©r√©(s) !")
        else:
            print("\nüí° Aucun fichier √† mettre √† jour")
        EOF
    
    - name: Commit and push changes
      run: |
        # V√©rifier s'il y a des fichiers g√©n√©r√©s
        if [ -f "/tmp/files_generated.txt" ]; then
          FILES_GENERATED=$(cat /tmp/files_generated.txt)
          
          if [ -n "$FILES_GENERATED" ]; then
            # Configuration Git
            git config --local user.email "action@github.com"
            git config --local user.name "CV Generator Bot"
            
            # Ajouter les fichiers g√©n√©r√©s
            echo "$FILES_GENERATED" | xargs git add
            
            # Cr√©er le message de commit avec la liste des fichiers
            COMMIT_MSG="ü§ñ Mise √† jour automatique des CV
            
            Fichiers g√©n√©r√©s:
            $(echo "$FILES_GENERATED" | sed 's/^/- /')
            
            G√©n√©r√© le $(date '+%Y-%m-%d √† %H:%M:%S')"
            
            # Commiter et pusher
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "‚úÖ Changements committ√©s et push√©s avec succ√®s !"
          else
            echo "üí° Aucun changement √† committer"
          fi
        else
          echo "üí° Aucun fichier g√©n√©r√©"
        fi || true)
          echo "üìù Fichiers CV modifi√©s: $CHANGED_FILES"
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changed_files=" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: Generate CV files with Claude
      if: steps.changed-files.outputs.changed_files != ''
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
      run: |
        python << 'EOF'
        import anthropic
        import os
        import hashlib
        from pathlib import Path
        
        def read_file(filepath):
            """Lit un fichier avec gestion d'erreur."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return f.read()
            except Exception as e:
                print(f"‚ùå Erreur lecture {filepath}: {e}")
                return None
        
        def write_file(filepath, content):
            """√âcrit un fichier."""
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                return True
            except Exception as e:
                print(f"‚ùå Erreur √©criture {filepath}: {e}")
                return False
        
        def file_hash(filepath):
            """Calcule le hash MD5 d'un fichier."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return hashlib.md5(f.read().encode()).hexdigest()
            except:
                return None
        
        def generate_cv_with_claude(cv_content, template_content, cv_filename):
            """G√©n√®re le CV avec Claude."""
            try:
                client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
                
                prompt = f"""
                Tu es un expert en g√©n√©ration de CV professionnel. Je vais te donner un CV en markdown et un template HTML moderne.
                
                **CV en Markdown ({cv_filename}) :**
                ```markdown
                {cv_content}
                ```
                
                **Template HTML moderne :**
                ```html
                {template_content}
                ```
                
                **Instructions sp√©cifiques :**
                1. Int√®gre parfaitement le contenu markdown dans le template HTML
                2. Convertis le markdown en HTML s√©mantique (h1, h2, p, ul, li, strong, em, etc.)
                3. Respecte absolument la structure, les classes CSS et les styles du template
                4. Assure-toi que les sections du CV s'adaptent aux zones pr√©vues dans le template
                5. Maintiens l'aspect moderne et professionnel du template
                6. G√©n√®re un HTML valide et bien indent√©
                7. Pr√©serve tous les styles CSS et la mise en page du template
                
                **Tr√®s important :** R√©ponds uniquement avec le code HTML final complet, sans explications, sans balises de code markdown, juste le HTML pur.
                """
                
                response = client.messages.create(
                    model="claude-sonnet-4-20250514",
                    max_tokens=4000,
                    messages=[{
                        "role": "user",
                        "content": prompt
                    }]
                )
                
                generated_html = response.content[0].text.strip()
                
                # Nettoyage du contenu au cas o√π Claude ajouterait des balises
                if generated_html.startswith('```html'):
                    generated_html = generated_html.split('```html')[1].split('```')[0].strip()
                elif generated_html.startswith('```'):
                    generated_html = generated_html.split('```')[1].split('```')[0].strip()
                
                return generated_html
                
            except Exception as e:
                print(f"‚ùå Erreur Claude API: {e}")
                return None
        
        # R√©cup√©rer les fichiers modifi√©s
        changed_files = os.getenv('CHANGED_FILES', '').strip()
        if not changed_files:
            print("Aucun fichier CV modifi√©")
            exit(0)
        
        print(f"üìù Fichiers CV modifi√©s d√©tect√©s:")
        file_list = [f.strip() for f in changed_files.split('\n') if f.strip()]
        
        # Lire le template
        print("üìñ Lecture du template...")
        template_content = read_file('Template/Cv_modern.html')
        if not template_content:
            print("‚ùå Impossible de lire le template")
            exit(1)
        
        # Traiter chaque fichier modifi√©
        files_generated = []
        
        for cv_file in file_list:
            if not cv_file.endswith('.md'):
                continue
                
            print(f"\nüîÑ Traitement de {cv_file}...")
            
            # Lire le contenu du CV
            cv_content = read_file(cv_file)
            if not cv_content:
                print(f"‚ùå Impossible de lire {cv_file}")
                continue
            
            # G√©n√©rer le nom du fichier de sortie
            cv_filename = Path(cv_file).stem  # Nom sans extension
            output_file = f"Output/{cv_filename}.html"
            
            print(f"üìÑ G√©n√©ration: {cv_file} ‚Üí {output_file}")
            
            # G√©n√©rer le CV avec Claude
            generated_html = generate_cv_with_claude(cv_content, template_content, cv_filename)
            if not generated_html:
                print(f"‚ùå √âchec g√©n√©ration pour {cv_file}")
                continue
            
            # V√©rifier si le fichier existe d√©j√† et s'il est diff√©rent
            needs_update = True
            if os.path.exists(output_file):
                # Comparer les hash pour voir si le contenu a chang√©
                old_hash = file_hash(output_file)
                new_hash = hashlib.md5(generated_html.encode()).hexdigest()
                
                if old_hash == new_hash:
                    print(f"‚úÖ {output_file} est d√©j√† √† jour")
                    needs_update = False
                else:
                    print(f"üîÑ {output_file} sera mis √† jour (contenu diff√©rent)")
            else:
                print(f"‚ú® Cr√©ation de {output_file}")
            
            if needs_update:
                if write_file(output_file, generated_html):
                    files_generated.append(output_file)
                    print(f"‚úÖ {output_file} g√©n√©r√© avec succ√®s")
        
        # Sauvegarder la liste des fichiers g√©n√©r√©s pour l'√©tape suivante
        if files_generated:
            with open('/tmp/files_generated.txt', 'w') as f:
                f.write('\n'.join(files_generated))
            print(f"\nüéâ {len(files_generated)} fichier(s) CV g√©n√©r√©(s) !")
        else:
            print("\nüí° Aucun fichier √† mettre √† jour")
        EOF
    
    - name: Commit and push changes
      run: |
        # V√©rifier s'il y a des fichiers g√©n√©r√©s
        if [ -f "/tmp/files_generated.txt" ]; then
          FILES_GENERATED=$(cat /tmp/files_generated.txt)
          
          if [ -n "$FILES_GENERATED" ]; then
            # Configuration Git
            git config --local user.email "action@github.com"
            git config --local user.name "CV Generator Bot"
            
            # Ajouter les fichiers g√©n√©r√©s
            echo "$FILES_GENERATED" | xargs git add
            
            # Cr√©er le message de commit avec la liste des fichiers
            COMMIT_MSG="ü§ñ Mise √† jour automatique des CV
            
            Fichiers g√©n√©r√©s:
            $(echo "$FILES_GENERATED" | sed 's/^/- /')
            
            G√©n√©r√© le $(date '+%Y-%m-%d √† %H:%M:%S')"
            
            # Commiter et pusher
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "‚úÖ Changements committ√©s et push√©s avec succ√®s !"
          else
            echo "üí° Aucun changement √† committer"
          fi
        else
          echo "üí° Aucun fichier g√©n√©r√©"
        fi || true)
            
            if [ -n "$TEMPLATE_CHANGED" ]; then
              # Changement de template
              COMMIT_MSG="üé® R√©g√©n√©ration automatique des CV suite √† modification du template
            
            Template mis √† jour: Template/Cv_modern.html
            Fichiers r√©g√©n√©r√©s:
            $(echo "$FILES_GENERATED" | sed 's/^/- /')
            
            G√©n√©r√© le $(date '+%Y-%m-%d √† %H:%M:%S')"
            else
              # Changement de CV
              COMMIT_MSG="ü§ñ Mise √† jour automatique des CV
            
            Fichiers g√©n√©r√©s:
            $(echo "$FILES_GENERATED" | sed 's/^/- /')
            
            G√©n√©r√© le $(date '+%Y-%m-%d √† %H:%M:%S')"
            fi
            
            # Commiter et pusher
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "‚úÖ Changements committ√©s et push√©s avec succ√®s !"
          else
            echo "üí° Aucun changement √† committer"
          fi
        else
          echo "üí° Aucun fichier g√©n√©r√©"
        fi || true)
        
        if [ -n "$TEMPLATE_CHANGED" ]; then
          echo "üé® Template modifi√© - G√©n√©ration de tous les CV"
          # Si le template a chang√©, traiter tous les fichiers CV
          ALL_CV_FILES=$(find CV -name "*.md" -type f | sort)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$ALL_CV_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          # Sinon, d√©tecter uniquement les fichiers .md modifi√©s dans le r√©pertoire CV/
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^CV/.*\.md
    
    - name: Generate CV files with Claude
      if: steps.changed-files.outputs.changed_files != ''
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
      run: |
        python << 'EOF'
        import anthropic
        import os
        import hashlib
        from pathlib import Path
        
        def read_file(filepath):
            """Lit un fichier avec gestion d'erreur."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return f.read()
            except Exception as e:
                print(f"‚ùå Erreur lecture {filepath}: {e}")
                return None
        
        def write_file(filepath, content):
            """√âcrit un fichier."""
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                return True
            except Exception as e:
                print(f"‚ùå Erreur √©criture {filepath}: {e}")
                return False
        
        def file_hash(filepath):
            """Calcule le hash MD5 d'un fichier."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return hashlib.md5(f.read().encode()).hexdigest()
            except:
                return None
        
        def generate_cv_with_claude(cv_content, template_content, cv_filename):
            """G√©n√®re le CV avec Claude."""
            try:
                client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
                
                prompt = f"""
                Tu es un expert en g√©n√©ration de CV professionnel. Je vais te donner un CV en markdown et un template HTML moderne.
                
                **CV en Markdown ({cv_filename}) :**
                ```markdown
                {cv_content}
                ```
                
                **Template HTML moderne :**
                ```html
                {template_content}
                ```
                
                **Instructions sp√©cifiques :**
                1. Int√®gre parfaitement le contenu markdown dans le template HTML
                2. Convertis le markdown en HTML s√©mantique (h1, h2, p, ul, li, strong, em, etc.)
                3. Respecte absolument la structure, les classes CSS et les styles du template
                4. Assure-toi que les sections du CV s'adaptent aux zones pr√©vues dans le template
                5. Maintiens l'aspect moderne et professionnel du template
                6. G√©n√®re un HTML valide et bien indent√©
                7. Pr√©serve tous les styles CSS et la mise en page du template
                
                **Tr√®s important :** R√©ponds uniquement avec le code HTML final complet, sans explications, sans balises de code markdown, juste le HTML pur.
                """
                
                response = client.messages.create(
                    model="claude-sonnet-4-20250514",
                    max_tokens=4000,
                    messages=[{
                        "role": "user",
                        "content": prompt
                    }]
                )
                
                generated_html = response.content[0].text.strip()
                
                # Nettoyage du contenu au cas o√π Claude ajouterait des balises
                if generated_html.startswith('```html'):
                    generated_html = generated_html.split('```html')[1].split('```')[0].strip()
                elif generated_html.startswith('```'):
                    generated_html = generated_html.split('```')[1].split('```')[0].strip()
                
                return generated_html
                
            except Exception as e:
                print(f"‚ùå Erreur Claude API: {e}")
                return None
        
        # R√©cup√©rer les fichiers modifi√©s
        changed_files = os.getenv('CHANGED_FILES', '').strip()
        if not changed_files:
            print("Aucun fichier CV modifi√©")
            exit(0)
        
        print(f"üìù Fichiers CV modifi√©s d√©tect√©s:")
        file_list = [f.strip() for f in changed_files.split('\n') if f.strip()]
        
        # Lire le template
        print("üìñ Lecture du template...")
        template_content = read_file('Template/Cv_modern.html')
        if not template_content:
            print("‚ùå Impossible de lire le template")
            exit(1)
        
        # Traiter chaque fichier modifi√©
        files_generated = []
        
        for cv_file in file_list:
            if not cv_file.endswith('.md'):
                continue
                
            print(f"\nüîÑ Traitement de {cv_file}...")
            
            # Lire le contenu du CV
            cv_content = read_file(cv_file)
            if not cv_content:
                print(f"‚ùå Impossible de lire {cv_file}")
                continue
            
            # G√©n√©rer le nom du fichier de sortie
            cv_filename = Path(cv_file).stem  # Nom sans extension
            output_file = f"Output/{cv_filename}.html"
            
            print(f"üìÑ G√©n√©ration: {cv_file} ‚Üí {output_file}")
            
            # G√©n√©rer le CV avec Claude
            generated_html = generate_cv_with_claude(cv_content, template_content, cv_filename)
            if not generated_html:
                print(f"‚ùå √âchec g√©n√©ration pour {cv_file}")
                continue
            
            # V√©rifier si le fichier existe d√©j√† et s'il est diff√©rent
            needs_update = True
            if os.path.exists(output_file):
                # Comparer les hash pour voir si le contenu a chang√©
                old_hash = file_hash(output_file)
                new_hash = hashlib.md5(generated_html.encode()).hexdigest()
                
                if old_hash == new_hash:
                    print(f"‚úÖ {output_file} est d√©j√† √† jour")
                    needs_update = False
                else:
                    print(f"üîÑ {output_file} sera mis √† jour (contenu diff√©rent)")
            else:
                print(f"‚ú® Cr√©ation de {output_file}")
            
            if needs_update:
                if write_file(output_file, generated_html):
                    files_generated.append(output_file)
                    print(f"‚úÖ {output_file} g√©n√©r√© avec succ√®s")
        
        # Sauvegarder la liste des fichiers g√©n√©r√©s pour l'√©tape suivante
        if files_generated:
            with open('/tmp/files_generated.txt', 'w') as f:
                f.write('\n'.join(files_generated))
            print(f"\nüéâ {len(files_generated)} fichier(s) CV g√©n√©r√©(s) !")
        else:
            print("\nüí° Aucun fichier √† mettre √† jour")
        EOF
    
    - name: Commit and push changes
      run: |
        # V√©rifier s'il y a des fichiers g√©n√©r√©s
        if [ -f "/tmp/files_generated.txt" ]; then
          FILES_GENERATED=$(cat /tmp/files_generated.txt)
          
          if [ -n "$FILES_GENERATED" ]; then
            # Configuration Git
            git config --local user.email "action@github.com"
            git config --local user.name "CV Generator Bot"
            
            # Ajouter les fichiers g√©n√©r√©s
            echo "$FILES_GENERATED" | xargs git add
            
            # Cr√©er le message de commit avec la liste des fichiers
            COMMIT_MSG="ü§ñ Mise √† jour automatique des CV
            
            Fichiers g√©n√©r√©s:
            $(echo "$FILES_GENERATED" | sed 's/^/- /')
            
            G√©n√©r√© le $(date '+%Y-%m-%d √† %H:%M:%S')"
            
            # Commiter et pusher
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "‚úÖ Changements committ√©s et push√©s avec succ√®s !"
          else
            echo "üí° Aucun changement √† committer"
          fi
        else
          echo "üí° Aucun fichier g√©n√©r√©"
        fi || true)
          echo "üìù Fichiers CV modifi√©s: $CHANGED_FILES"
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changed_files=" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: Generate CV files with Claude
      if: steps.changed-files.outputs.changed_files != ''
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
      run: |
        python << 'EOF'
        import anthropic
        import os
        import hashlib
        from pathlib import Path
        
        def read_file(filepath):
            """Lit un fichier avec gestion d'erreur."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return f.read()
            except Exception as e:
                print(f"‚ùå Erreur lecture {filepath}: {e}")
                return None
        
        def write_file(filepath, content):
            """√âcrit un fichier."""
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                return True
            except Exception as e:
                print(f"‚ùå Erreur √©criture {filepath}: {e}")
                return False
        
        def file_hash(filepath):
            """Calcule le hash MD5 d'un fichier."""
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    return hashlib.md5(f.read().encode()).hexdigest()
            except:
                return None
        
        def generate_cv_with_claude(cv_content, template_content, cv_filename):
            """G√©n√®re le CV avec Claude."""
            try:
                client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
                
                prompt = f"""
                Tu es un expert en g√©n√©ration de CV professionnel. Je vais te donner un CV en markdown et un template HTML moderne.
                
                **CV en Markdown ({cv_filename}) :**
                ```markdown
                {cv_content}
                ```
                
                **Template HTML moderne :**
                ```html
                {template_content}
                ```
                
                **Instructions sp√©cifiques :**
                1. Int√®gre parfaitement le contenu markdown dans le template HTML
                2. Convertis le markdown en HTML s√©mantique (h1, h2, p, ul, li, strong, em, etc.)
                3. Respecte absolument la structure, les classes CSS et les styles du template
                4. Assure-toi que les sections du CV s'adaptent aux zones pr√©vues dans le template
                5. Maintiens l'aspect moderne et professionnel du template
                6. G√©n√®re un HTML valide et bien indent√©
                7. Pr√©serve tous les styles CSS et la mise en page du template
                
                **Tr√®s important :** R√©ponds uniquement avec le code HTML final complet, sans explications, sans balises de code markdown, juste le HTML pur.
                """
                
                response = client.messages.create(
                    model="claude-sonnet-4-20250514",
                    max_tokens=4000,
                    messages=[{
                        "role": "user",
                        "content": prompt
                    }]
                )
                
                generated_html = response.content[0].text.strip()
                
                # Nettoyage du contenu au cas o√π Claude ajouterait des balises
                if generated_html.startswith('```html'):
                    generated_html = generated_html.split('```html')[1].split('```')[0].strip()
                elif generated_html.startswith('```'):
                    generated_html = generated_html.split('```')[1].split('```')[0].strip()
                
                return generated_html
                
            except Exception as e:
                print(f"‚ùå Erreur Claude API: {e}")
                return None
        
        # R√©cup√©rer les fichiers modifi√©s
        changed_files = os.getenv('CHANGED_FILES', '').strip()
        if not changed_files:
            print("Aucun fichier CV modifi√©")
            exit(0)
        
        print(f"üìù Fichiers CV modifi√©s d√©tect√©s:")
        file_list = [f.strip() for f in changed_files.split('\n') if f.strip()]
        
        # Lire le template
        print("üìñ Lecture du template...")
        template_content = read_file('Template/Cv_modern.html')
        if not template_content:
            print("‚ùå Impossible de lire le template")
            exit(1)
        
        # Traiter chaque fichier modifi√©
        files_generated = []
        
        for cv_file in file_list:
            if not cv_file.endswith('.md'):
                continue
                
            print(f"\nüîÑ Traitement de {cv_file}...")
            
            # Lire le contenu du CV
            cv_content = read_file(cv_file)
            if not cv_content:
                print(f"‚ùå Impossible de lire {cv_file}")
                continue
            
            # G√©n√©rer le nom du fichier de sortie
            cv_filename = Path(cv_file).stem  # Nom sans extension
            output_file = f"Output/{cv_filename}.html"
            
            print(f"üìÑ G√©n√©ration: {cv_file} ‚Üí {output_file}")
            
            # G√©n√©rer le CV avec Claude
            generated_html = generate_cv_with_claude(cv_content, template_content, cv_filename)
            if not generated_html:
                print(f"‚ùå √âchec g√©n√©ration pour {cv_file}")
                continue
            
            # V√©rifier si le fichier existe d√©j√† et s'il est diff√©rent
            needs_update = True
            if os.path.exists(output_file):
                # Comparer les hash pour voir si le contenu a chang√©
                old_hash = file_hash(output_file)
                new_hash = hashlib.md5(generated_html.encode()).hexdigest()
                
                if old_hash == new_hash:
                    print(f"‚úÖ {output_file} est d√©j√† √† jour")
                    needs_update = False
                else:
                    print(f"üîÑ {output_file} sera mis √† jour (contenu diff√©rent)")
            else:
                print(f"‚ú® Cr√©ation de {output_file}")
            
            if needs_update:
                if write_file(output_file, generated_html):
                    files_generated.append(output_file)
                    print(f"‚úÖ {output_file} g√©n√©r√© avec succ√®s")
        
        # Sauvegarder la liste des fichiers g√©n√©r√©s pour l'√©tape suivante
        if files_generated:
            with open('/tmp/files_generated.txt', 'w') as f:
                f.write('\n'.join(files_generated))
            print(f"\nüéâ {len(files_generated)} fichier(s) CV g√©n√©r√©(s) !")
        else:
            print("\nüí° Aucun fichier √† mettre √† jour")
        EOF
    
    - name: Commit and push changes
      run: |
        # V√©rifier s'il y a des fichiers g√©n√©r√©s
        if [ -f "/tmp/files_generated.txt" ]; then
          FILES_GENERATED=$(cat /tmp/files_generated.txt)
          
          if [ -n "$FILES_GENERATED" ]; then
            # Configuration Git
            git config --local user.email "action@github.com"
            git config --local user.name "CV Generator Bot"
            
            # Ajouter les fichiers g√©n√©r√©s
            echo "$FILES_GENERATED" | xargs git add
            
            # Cr√©er le message de commit avec la liste des fichiers
            COMMIT_MSG="ü§ñ Mise √† jour automatique des CV
            
            Fichiers g√©n√©r√©s:
            $(echo "$FILES_GENERATED" | sed 's/^/- /')
            
            G√©n√©r√© le $(date '+%Y-%m-%d √† %H:%M:%S')"
            
            # Commiter et pusher
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "‚úÖ Changements committ√©s et push√©s avec succ√®s !"
          else
            echo "üí° Aucun changement √† committer"
          fi
        else
          echo "üí° Aucun fichier g√©n√©r√©"
        fi