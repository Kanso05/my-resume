name: Generate CV Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install anthropic
      run: pip install anthropic
    
    - name: Generate CVs
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        python << 'EOF'
        import anthropic, os, glob, hashlib
        from pathlib import Path
        
        # CrÃ©er rÃ©pertoire Output
        os.makedirs('Output', exist_ok=True)
        
        # Lire template
        with open('Template/Cv_modern.html', 'r', encoding='utf-8') as f:
            template = f.read()
        
        client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
        files_generated = []
        
        # Traiter tous les CV
        for cv_file in glob.glob('CV/*.md'):
            with open(cv_file, 'r', encoding='utf-8') as f:
                cv_content = f.read()
            
            # GÃ©nÃ©rer avec Claude
            response = client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=4000,
                messages=[{
                    "role": "user",
                    "content": f"""IntÃ¨gre ce CV markdown dans le template HTML. RÃ©ponds uniquement avec le HTML final complet.

        CV Markdown:
        {cv_content}

        Template HTML:
        {template}"""
                }]
            )
            
            html = response.content[0].text.strip()
            if html.startswith('```'):
                html = html.split('```')[1].split('```')[0].strip()
                if html.startswith('html'):
                    html = html[4:].strip()
            
            # Sauvegarder
            output_file = f"Output/{Path(cv_file).stem}.html"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(html)
            files_generated.append(output_file)
            print(f"âœ… GÃ©nÃ©rÃ©: {output_file}")
        
        # Sauvegarder liste des fichiers pour la release
        with open('/tmp/release_files.txt', 'w') as f:
            f.write('\n'.join(files_generated))
        EOF
    
    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: cv-${{ github.run_number }}-${{ github.sha }}
        name: "CV Release - ${{ github.event.head_commit.message }}"
        body: |
          ðŸ¤– CV automatiquement gÃ©nÃ©rÃ©s
          
          **Commit:** ${{ github.sha }}
          **Message:** ${{ github.event.head_commit.message }}
          **Date:** ${{ github.event.head_commit.timestamp }}
          
          Fichiers gÃ©nÃ©rÃ©s:
          $(cat /tmp/release_files.txt | sed 's/Output\//- /' | sed 's/\.html/ (HTML)/')
        files: Output/*.html
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
